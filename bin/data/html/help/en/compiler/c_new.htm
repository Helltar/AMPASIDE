<html>
<head>
<title>MIDletPascal 3.0 Documentation</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style type="text/css">
<!--
body,td,th {
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	color: #333399;
}
body {
	background-color: #FFFFFF;
}
a:link {
	color: #333399;
}
a:visited {
	color: #333399;
}
a:hover {
	color: #666666;
}
a:active {
	color: #333399;
}
-->
</style></head>

<body>
<p><font size=+2>

<b>What's New in the MIDletPascal 3.x Compiler</b> \ New Features

</font></p>
<table width="100%"  border="0">
  <tr>
    <td height="3" bgcolor="#EEEE00"></td>
  </tr>
</table><br>

<a name="arrayms"/>
<b>Max Array Size</b>
<br/>
<i>since 3.0</i>
<br/>

<p>The maximum array size now is 32767 (15 bits long).<br/>
<br/>
That means now is possible to declare an arrays like:</p>

<pre>
var
  AZeroBased : array[0..32766] of char;
  AOneBased : array[1..32767] of integer;
</pre>

<a name="smartsc"/>
<b>Smart String Concatenation</b>
<br/>
<i>since 3.0</i>
<br/>

<p>Now you can concatenate strings just like in other pascal well=known dialects, without the plus operator.<br/>
<br/>
That means now is possible to build strings like:</p>

<pre>s := 'this is'#10'a test';</pre>

<a name="shlnshr"/>
<b>Shift Operators</b>
<br/>
<i>since 3.0</i>
<br/>

<p>The shift operators SHL and SHR are now implemented.<br/>
<br/>
That means now you can do things like:</p>

<pre>
  a := $A714;
  b := a shl 3;
  c := b shr 2;
</pre>

<i>since 3.3</i>
<br/>

<p>You can also use their equivalents <</>>:</p>

<pre>
  a := $714A;
  b := a << 3;
  c := b >> 2;
</pre>

<a name="binline"/>
<b>Bytecode Inlining</b>
<br/>
<i>since 3.0</i>
<br/>

<p>Now you can add inline bytecode instructions directly with the inline procedure.</p>

<pre>
procedure DoNothing;
begin
inline(
	nop;
);
end;
</pre>

<i>since 3.4</i>
<br/>

<p>You can also use the bytecode/end pair:</p>

<pre>
procedure DoNothing;
begin
  bytecode
	nop;
  end;
end;
</pre>

<p><b>Be sure you understand java bytecode and how it works before using this feature, or the MIDlet may crash.</b></p>

<a name="infloop"/>
<b>Infinite Loop Support</b>
<br/>
<i>since 3.1</i>
<br/>

<p>Now you can implement an infinite loop by using REPEAT/FOREVER keywords. If you want to stop the loop just call break as in any other kind of loop.</p>

<pre>
repeat
  ...
  if <i>condition</i> then
    break;
  ...
forever;
</pre>

<a name="exit"/>
<b>Exit Keyword Support</b>
<br/>
<i>since 3.2</i>
<br/>

<p>Now you can use the exit keyword to craft easily your logic.</p>

<a name="result"/>
<b>Result Keyword Support</b>
<br/>
<i>since 3.3</i>
<br/>

<p>Now you can use the result keyword to return values from functions.</p>

<pre>
function Return4: integer;
begin
  result := 4;
end;
</pre>

<a name="locallibs"/>
<b>Project Relative Libraries Support</b>
<br/>
<i>since 3.4</i>
<br/>

<p>Now you can add libraries to a project into a local folder (libs) instead of adding them to the Global Libraries directory. This is useful if you have many versions of the same library depending on the project (ex. for Internationalization purposes) and also for easier backup and redistribution processes.</p>

<a name="ushr"/>
<b>Unsigned Right Shift Operator</b>
<br/>
<i>since 3.4</i>
<br/>

<p>This operator is implemented using the USHR keyword and it's equivalent: >>>.</p>

<pre>
  a := $2704;
  b := a ushr 1;
  c := b >>> 2;
</pre>

</body>
</html>
