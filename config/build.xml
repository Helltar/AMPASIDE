<project name="microemu-android" default="package-apk">

    <property name="sdk-platform-folder" value="${sdk-folder}/platforms/android-26" />
    <property name="microemu-cldc.jar" value="${root-folder}/lib/cldc.jar" />
    <property name="microemu-midp.jar" value="${root-folder}/lib/midp.jar" />
    <property name="microemu-javase.jar" value="${root-folder}/lib/javase.jar" />
    <property name="microemu-jsr-75.jar" value="${root-folder}/lib/jsr-75.jar" />

    <property name="outdir-assets" value="${outdir}/assets" />
    <property name="outdir-classes" value="${outdir}/classes" />
    <property name="outdir-producer" value="${outdir}/producer" />
    <property name="outdir-res" value="${outdir}/res" />
    <property name="outdir-libs" value="${outdir}/libs" />

    <property name="dex-file" value="classes.dex" />
    <property name="intermediate-dex" value="${outdir}/${dex-file}" />

    <property name="out-package" value="${outdir}/${midlet.package}" />
    <property name="sdk-platform-tools" value="${sdk-folder}/platform-tools" />

    <condition property="aapt" value="${sdk-folder}/build-tools/aapt">
        <and>
            <not>
                <os family="windows" />
            </not>
            <available file="${sdk-platform-tools}" type="dir" />
        </and>
    </condition>

    <condition property="aapt" value="${sdk-folder}/build-tools/aapt.exe">
        <and>
            <os family="windows" />
            <available file="${sdk-platform-tools}" type="dir" />
        </and>
    </condition>

    <condition else="${sdk-platform-tools}/adb.exe" property="adb"
        value="${sdk-platform-tools}/adb">
        <available file="${sdk-platform-tools}" type="dir" />
    </condition>

    <condition property="dx" value="${sdk-folder}/build-tools/dx.bat">
        <and>
            <os family="windows" />
            <available file="${sdk-platform-tools}" type="dir" />
        </and>
    </condition>

    <condition property="dx" value="${sdk-platform-folder}/tools/dx.bat">
        <and>
            <os family="windows" />
            <not>
                <available file="${sdk-platform-tools}" type="dir" />
            </not>
        </and>
    </condition>

    <condition property="dx" value="${sdk-folder}/build-tools/dx">
        <and>
            <not>
                <os family="windows" />
            </not>
            <available file="${sdk-platform-tools}" type="dir" />
        </and>
    </condition>

    <condition property="dx" value="${sdk-platform-folder}/tools/dx">
        <and>
            <not>
                <os family="windows" />
            </not>
            <not>
                <available file="${sdk-platform-tools}" type="dir" />
            </not>
        </and>
    </condition>

    <condition else="${sdk-folder}/tools/apkbuilder" property="apk-builder"
        value="${sdk-folder}/tools/apkbuilder.bat">
        <os family="windows" />
    </condition>

    <property name="android-jar" value="${sdk-platform-folder}/android.jar" />

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${root-folder}/lib/ant-contrib-1.0b3.jar" />
        </classpath>
    </taskdef>

    <macrodef name="loadjad">
        <attribute name="jad" />
        <attribute name="prefix" default="" />
        <sequential>
            <loadproperties srcFile="@{jad}">
                <filterchain>
                    <prefixlines prefix="@{prefix}" />
                </filterchain>
            </loadproperties>
        </sequential>
    </macrodef>

    <target name="clean">
        <delete dir="${outdir}" />
    </target>

    <target name="check">
        <available file="${microemu-cldc.jar}" property="microemu-cldc.jar.present" />
        <fail message="microemu-cldc.jar doesn't exist at ${microemu-cldc.jar}"
            unless="microemu-cldc.jar.present" />

        <available file="${microemu-midp.jar}" property="microemu-midp.jar.present" />
        <fail message="microemu-midp.jar doesn't exist at ${microemu-midp.jar}"
            unless="microemu-midp.jar.present" />

        <available file="${microemu-javase.jar}" property="microemu-javase.jar.present" />
        <fail message="microemu-javase.jar doesn't exist at ${microemu-javase.jar}"
            unless="microemu-javase.jar.present" />

        <available file="${microemu-jsr-75.jar}" property="microemu-jsr-75.jar.present" />
        <fail message="microemu-jsr-75.jar doesn't exist at ${microemu-jsr-75.jar}"
            unless="microemu-jsr-75.jar.present" />
    </target>

    <target name="dirs">
        <mkdir dir="${outdir}" />
        <mkdir dir="${outdir-assets}" />
        <mkdir dir="${outdir-classes}" />
        <mkdir dir="${outdir-producer}" />
        <mkdir dir="${outdir-res}" />
        <mkdir dir="${outdir-libs}" />
    </target>

    <target name="compile-producer" depends="check,dirs">
        <javac debug="true" destdir="${outdir-producer}" extdirs=""
            includes="org/microemu/android/asm/**" srcdir="${root-folder}src" target="1.8">
            <classpath>
                <pathelement location="${microemu-javase.jar}" />
                <pathelement location="${root-folder}/lib/asm-3.2.jar" />
                <pathelement location="${root-folder}/lib/asm-tree-3.2.jar" />
            </classpath>
        </javac>
    </target>

    <target name="read-jad">
        <loadjad jad="${midlet.jad}" prefix="jad." />

        <basename file="${midlet.jad}" property="midlet.jad.basename" />

        <propertyregex input="${jad.MIDlet-Jar-URL}" property="jar.first.character" regexp="^\/"
            select="\0" />
        <if>
            <equals arg1="${jar.first.character}" arg2="/" />
            <then>
                <property name="midlet.jar" value="${jad.MIDlet-Jar-URL}" />
            </then>
            <else>
                <dirname file="${midlet.jad}" property="midlet.jad.dir" />
                <property name="midlet.jar" value="${midlet.jad.dir}/${jad.MIDlet-Jar-URL}" />
            </else>
        </if>

        <propertyregex input="${jad.MIDlet-1}" property="midlet.name"
            regexp="([^,]+),([^,]+),([^,]+)" select="\1" />

        <echo>midlet.name = [${midlet.name}]</echo>

        <fail message="No midlet name defined in jad." unless="midlet.name" />

        <propertyregex input="${jad.MIDlet-1}" property="midlet.icon.totrim"
            regexp="([^,]+),([^,]+),([^,]+)" select="\2" />

        <echo>midlet.icon.totrim = [${midlet.icon.totrim}]</echo>

        <fail message="No icon defined in jad." unless="midlet.icon.totrim" />

        <propertyregex defaultValue="${midlet.icon.totrim}" input="${midlet.icon.totrim}"
            property="midlet.icon" regexp="^[ \t]+|[ \t]+$" replace="" />

        <echo>midlet.icon = [${midlet.icon}]</echo>

        <condition property="NotHasIcon">
            <equals arg1="${midlet.icon}" arg2="" />
        </condition>
        <fail if="NotHasIcon" message="No valid icon set in jad." />

        <propertyregex input="${jad.MIDlet-1}" property="midlet.class.totrim"
            regexp="([^,]+),([^,]+),([^,]+)" select="\3" />

        <echo>midlet.class.totrim = [${midlet.class.totrim}]</echo>

        <propertyregex defaultValue="${midlet.class.totrim}" input="${midlet.class.totrim}"
            property="midlet.class" regexp="^[ \t]+|[ \t]+$" replace="" />
    </target>

    <target name="prepare-jars" depends="compile-producer,read-jad">
        <java classname="org.microemu.android.asm.AndroidProducer">
            <arg value="${midlet.jar}" />
            <arg value="${outdir-libs}/midlet.jar" />
            <arg value="midlet" />
            <classpath>
                <pathelement path="${outdir-producer}" />
                <pathelement location="${microemu-javase.jar}" />
                <pathelement location="${root-folder}/lib/asm-3.2.jar" />
                <pathelement location="${root-folder}/lib/asm-tree-3.2.jar" />
            </classpath>
        </java>
    </target>

    <target name="compile" depends="prepare-jars,package-res">
        <javac bootclasspath="${android-jar}" debug="true" destdir="${outdir-classes}"
            excludes="org/microemu/android/asm/**" extdirs="" srcdir="${root-folder}/src"
            target="1.8">
            <classpath>
                <pathelement location="${microemu-cldc.jar}" />
                <pathelement location="${microemu-midp.jar}" />
                <pathelement location="${microemu-javase.jar}" />
            </classpath>
        </javac>
    </target>

    <target name="dex" depends="compile">
        <basename file="${intermediate-dex}" property="intermediate-dex.base" />
        <dirname file="${intermediate-dex}" property="intermediate-dex.dir" />
        <basename file="${microemu-cldc.jar}" property="microemu-cldc.jar.base" />
        <dirname file="${microemu-cldc.jar}" property="microemu-cldc.jar.dir" />
        <basename file="${microemu-midp.jar}" property="microemu-midp.jar.base" />
        <dirname file="${microemu-midp.jar}" property="microemu-midp.jar.dir" />
        <basename file="${microemu-javase.jar}" property="microemu-javase.jar.base" />
        <dirname file="${microemu-javase.jar}" property="microemu-javase.jar.dir" />
        <basename file="${microemu-jsr-75.jar}" property="microemu-jsr-75.jar.base" />
        <dirname file="${microemu-jsr-75.jar}" property="microemu-jsr-75.jar.dir" />
        <basename file="${outdir-libs}/midlet.jar" property="prepared.midlet.jar.base" />
        <dirname file="${outdir-libs}/midlet.jar" property="prepared.midlet.jar.dir" />
        <exec executable="${dx}" failonerror="true">
            <arg value="--dex" />
            <arg value="--core-library" />
            <arg value="--output=${intermediate-dex.dir}/${intermediate-dex.base}" />
            <arg value="--positions=lines" />
            <arg value="${microemu-cldc.jar.dir}/${microemu-cldc.jar.base}" />
            <arg value="${microemu-midp.jar.dir}/${microemu-midp.jar.base}" />
            <arg value="${microemu-javase.jar.dir}/${microemu-javase.jar.base}" />
            <arg value="${microemu-jsr-75.jar.dir}/${microemu-jsr-75.jar.base}" />
            <arg path="${outdir-classes}" />
            <arg value="${prepared.midlet.jar.dir}/${prepared.midlet.jar.base}" />
        </exec>
    </target>

    <target name="prepare-assets" depends="read-jad">
        <unzip dest="${outdir-assets}" src="${midlet.jar}">
            <patternset>
                <exclude name="**/*.class" />
                <exclude name="**/META-INF" />
                <exclude name="**/MANIFEST.MF" />
            </patternset>
        </unzip>
        <copy file="${midlet.jad}" tofile="${outdir-assets}/${midlet.jad.basename}" />
    </target>

    <target name="prepare-res" depends="read-jad">
        <mkdir dir="${outdir-res}/values" />
        <copy file="${root-folder}/../tmp/strings.xml" tofile="${outdir-res}/values/strings.xml" />
        <mkdir dir="${outdir-res}/drawable" />
        <unjar dest="${outdir}" src="${midlet.jar}">
            <patternset>
                <include name="${midlet.icon}" />
            </patternset>
        </unjar>
        <copy file="${outdir}/assets/${midlet.icon}" tofile="${outdir-res}/drawable/app_icon.png" />
        <copy file="${outdir}/../AndroidManifest.xml" tofile="${outdir}/AndroidManifest.xml" />
    </target>

    <target name="package-res" depends="prepare-assets, prepare-res">
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-m" />
            <arg value="-J" />
            <arg value="${root-folder}/src" />
            <arg value="-M" />
            <arg value="${outdir}/AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${outdir-res}" />
            <arg value="-A" />
            <arg value="${outdir-assets}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${out-package}.res" />
        </exec>
    </target>

    <target name="package-apk" depends="clean, dex, package-res">
        <basename file="${out-package}" property="out-package.base" />
        <dirname file="${out-package}" property="out-package.dir" />
        <basename file="${intermediate-dex}" property="intermediate-dex.base" />
        <dirname file="${intermediate-dex}" property="intermediate-dex.dir" />
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-package.dir}/${out-package.base}" />
            <arg value="-z" />
            <arg value="${out-package.dir}/${out-package.base}.res" />
            <arg value="-f" />
            <arg value="${intermediate-dex.dir}/${intermediate-dex.base}" />
        </exec>
    </target>

    <target name="install" depends="package-apk">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="${out-package}" />
        </exec>
    </target>

    <target name="reinstall" depends="package-apk">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="-r" />
            <arg value="${out-package}" />
        </exec>
    </target>

    <target name="uninstall">
        <echo>Uninstalling ${application-package} from the default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="uninstall" />
            <arg value="${application-package}" />
        </exec>
    </target>

</project>
